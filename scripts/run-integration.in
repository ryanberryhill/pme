#!/bin/bash

trap exit INT

PME=./pme
CANONICALIZE=scripts/pme-canonicalize
AIGSIM=aigsim
tmpdir=$(mktemp -d)

VALGRIND=
VALGRIND_COMMAND="valgrind -q --tool=memcheck --leak-check=full --error-exitcode=1 --suppressions=glucose.supp"


tests_passed=0
tests_failed=0

run_bmc=0
run_ic3=0
run_min=0
run_ivc=0
limited_run=0

POSITIONAL=()
while [[ $# -gt 0 ]] ; do
    key="$1"

    case $key in
        --valgrind)
        VALGRIND=$VALGRIND_COMMAND
        shift
        ;;
        --ic3)
        limited_run=1
        run_ic3=1
        shift
        ;;
        --bmc)
        limited_run=1
        run_bmc=1
        shift
        ;;
        --minimization)
        limited_run=1
        run_min=1
        shift
        ;;
        --ivc)
        limited_run=1
        run_ivc=1
        shift
        ;;
        *)    # unknown option
        POSITIONAL+=("$1")
        shift
        ;;
    esac
done
set -- "${POSITIONAL[@]}" #

function ivc_integration() {
    name=$1; shift
    errors=0

    for aig_file in ivc-examples/*.aig ; do
        prefix=${aig_file%.*}
        aig_name=${prefix##*/}
        aig_tmpdir=$tmpdir/$name/$aig_name
        ivc_tmpdir=$aig_tmpdir/ivcs

        mkdir -p $aig_tmpdir
        mkdir -p $ivc_tmpdir

        logfile=$aig_tmpdir/pme.log
        checksafe_logfile=$aig_tmpdir/checksafe.log
        checkmin_logfile=$aig_tmpdir/checksafe.log

        $VALGRIND \
        $PME $@ \
        --save-ivcs $ivc_tmpdir/ivc_integration $aig_file \
        > $logfile  2>&1

        if (($? != 0)) ; then
            echo "Error running PME (IVC) on $aig_file: see $logfile for details"
            errors=$((errors+1))
        fi

        # Check all generated IVCs are safe and minimal
        for ivc_file in $ivc_tmpdir/*.aig ; do
            if [ ! -f "$ivc_file" ] ; then
                echo "No IVCs generated for $aig_file"
                errors=$((errors+1))
                continue
            fi

            $PME --ic3 $ivc_file > $checksafe_logfile 2>&1

            if (($? != 0)) ; then
                echo "Error checking IVC $ivc_file: see $checksafe_logfile for details"
                errors=$((errors+1))
                continue
            fi

            grep -q "^0$" $checksafe_logfile
            if (( $? != 0 )) ; then
                echo "Expected IVC $ivc_file to be safe but it was not, see $checksafe_logfile"
                errors=$((errors+1))
                continue
            fi

            $PME --check-minimal-ivc $ivc_file > $checkmin_logfile 2>&1
            if (($? != 0)) ; then
                echo "Expected IVC $ivc_file to be minimal but it was not: see $checkmin_logfile"
                errors=$((errors+1))
                continue
            fi
        done
    done

    if ((errors > 0)) ; then
        return 1
    else
        return 0
    fi
}

function minimize_integration() {
    name=$1 ; shift
    mode_arg=$1
    all_msis=0
    minimal=1
    if [ "$mode_arg" == "--all" ] ; then
        all_msis=1
        shift
    elif [ "$mode_arg" == "--non-minimal" ] ; then
        minimal=0
        shift
    fi

    errors=0
    for aig_file in examples/proofs/*.aig; do
        prefix=${aig_file%.*}
        aig_name=${prefix##*/}
        aig_tmpdir=$tmpdir/$name/$aig_name

        mkdir -p $aig_tmpdir

        for pme_file in $prefix.*.pme ; do
            # Skip AIGs for which we don't have any proofs
            [ -f "$pme_file" ] || break
            pme_name=${pme_file%.*}
            pme_name=${pme_name##*/}
            pme_tmpdir=$tmpdir/$name/$aig_name/$pme_name

            mkdir -p $pme_tmpdir

            logfile=$pme_tmpdir/pme.log

            $VALGRIND \
            $PME $@ \
            --save-proofs $pme_tmpdir/minimize_integration $aig_file $pme_file \
            > $logfile 2>&1

            if (($? != 0)) ; then
                echo "Error running PME for $pme_file: see $logfile for details"
                errors=$((errors+1))
            fi

            minimized_dir=$pme_file.minimized
            golden_missing=0
            minimize_integration_missing=0

            # We can only check golden results if we're doing full minimization
            if [ -d $minimized_dir ] && [ "$minimal" == 1 ] ; then
                echo Checking golden result for $pme_file versus $minimized_dir

                # Always check that the proof we found is in the golden result
                for minimize_integration_file in $pme_tmpdir/*.pme ; do
                    $CANONICALIZE $minimize_integration_file
                    minimize_integration_sha=$(sha1sum $minimize_integration_file | cut -f1 -d' ')
                    find $minimized_dir -type f -name "*.pme" \
                        -exec sha1sum {} + \
                        | grep "^$minimize_integration_sha" > /dev/null
                    if [ $? -ne 0 ] ; then
                        echo $minimize_integration_file is not in the golden result
                        errors=$((errors+1))
                        minimize_integration_missing=$((minimize_integration_missing+1))
                    fi
                done

                # For all-msis algorithms, check that each golden proof was
                # found
                if (($all_msis != 0)) ; then
                    for golden_file in $minimized_dir/*.pme ; do
                        golden_sha=$(sha1sum $golden_file | cut -f1 -d' ')
                        find $pme_tmpdir -type f -name "*.pme" \
                            -exec sha1sum {} + \
                            | grep "^$golden_sha" > /dev/null
                        if [ $? -ne 0 ] ; then
                            echo $golden_file is not in the minimize_integration test result
                            errors=$((errors+1))
                            golden_missing=$((golden_missing+1))
                        fi
                    done
                fi

                if ((golden_missing > 0)) || ((minimize_integration_missing > 0)) ; then
                    echo "Golden result is missing $minimize_integration_missing proofs"
                    echo "Test result is missing $golden_missing proofs"
                else
                    echo "Golden result matches"
                fi
            else
                echo No golden result for $pme_file
            fi
        done

        non_proof=0
        non_minimal=0
        good_proof=0

        for proof_file in $aig_tmpdir/**/*.pme ; do
            # Skip if the pattern only matches literally *.pme, which means
            # no proofs were generated.
            [ -f "$proof_file" ] || break

            echo "Checking $proof_file is a proof"
            $PME --check $aig_file $proof_file > /dev/null 2>&1
            if (($? != 0)) ; then
                non_proof=$((non_proof+1))
                echo $proof_file is not a proof
                continue
            fi

            if [ "$minimal" == 1 ] ; then
                echo "Checking $proof_file for minimality"
                $PME --check-minimal $aig_file $proof_file > /dev/null 2>&1
                if (($? != 0)) ; then
                    non_minimal=$((non_minimal+1))
                    echo $proof_file is non-minimal
                    continue
                fi
            fi

            good_proof=$((good_proof+1))
        done

        if ((non_proof > 0)) || ((non_minimal > 0)) ; then
            echo -n "Found $non_proof non-proofs and "
            echo    "$non_minimal non-minimal proofs for $aig_file"
            errors=$(($errors+1))
            continue
        elif ((good_proof == 0)) ; then
            echo No proofs were generated for $aig_file
            errors=$(($errors+1))
            continue
        else
            echo All $good_proof proofs validated for $aig_file
        fi

    done

    if ((errors > 0)) ; then
        return 1
    else
        return 0
    fi
}

function ic3_integration() {
    name=$1 ; shift
    errors=0
    ic3_tmpdir=$tmpdir/$name
    mkdir $ic3_tmpdir
    for aig_file in examples/safe/*.aig examples/unsafe/*.aig ; do
        prefix=${aig_file%.*}
        aig_name=${prefix##*/}
        logfile=$ic3_tmpdir/$aig_name.log
        echo $aig_file $aig_name
        expected_safe=0
        case "$aig_file" in
            */unsafe/*) expected_safe=0 ;;
            */safe/*)   expected_safe=1 ;;
            *) echo "Don't know how to handle $aig_file" ; errors=$((errors+1)) ; continue ;;
        esac

        $VALGRIND $PME $@ --check $aig_file > $logfile 2>&1

        # With --check it will return EXIT_FAILURE if the proof isn't valid
        if (($? != 0)) ; then
            echo "Error running PME (IC3) for $aig_file: see $logfile for details"
            errors=$((errors+1))
            continue
        fi

        if [[ "$expected_safe" == "1" ]] ; then
            grep -q "^0$" $logfile
            if (( $? != 0 )) ; then
                echo "Expected $aig_file to be safe but it was not, see $logfile"
                errors=$((errors+1))
                continue
            fi
        else
            grep -q "^1$" $logfile
            if (( $? != 0 )) ; then
                echo "Expected $aig_file to be unsafe but it was not: see $logfile"
                errors=$((errors+1))
                continue
            fi

            command -v $AIGSIM
            if (($? != 0)) ; then
                echo "Skipping counter-example validation because aigsim was not found"
                continue
            fi

            $AIGSIM -c $aig_file $logfile > /dev/null 2>&1
            if (( $? != 0 )) ; then
                echo "Counter-example was faulty: see $logfile"
                errors=$((errors+1))
                continue
            fi
        fi
    done

    if ((errors > 0)) ; then
        return 1
    else
        return 0
    fi
}

function bmc_integration() {
    name=$1 ; shift
    errors=0
    bmc_tmpdir=$tmpdir/$name
    mkdir $bmc_tmpdir
    for aig_file in examples/safe/*.aig examples/unsafe/*.aig ; do
        prefix=${aig_file%.*}
        aig_name=${prefix##*/}
        logfile=$bmc_tmpdir/$aig_name.log
        echo $aig_file $aig_name
        expected_safe=0
        case "$aig_file" in
            */unsafe/*) expected_safe=0 ;;
            */safe/*)   expected_safe=1 ;;
            *) echo "Don't know how to handle $aig_file" ; errors=$((errors+1)) ; continue ;;
        esac

        $VALGRIND $PME $@ $aig_file > $logfile 2>&1

        if (($? != 0)) ; then
            echo "Error running PME (BMC) for $aig_file: see $logfile for details"
            errors=$((errors+1))
            continue
        fi

        if [[ "$expected_safe" == "1" ]] ; then
            grep -q "^2$" $logfile
            if (( $? != 0 )) ; then
                echo "Expected $aig_file to be unknown/safe but it was not, see $logfile"
                errors=$((errors+1))
                continue
            fi
        else
            grep -q "^1$" $logfile
            if (( $? != 0 )) ; then
                echo "Expected $aig_file to be unsafe but it was not: see $logfile"
                errors=$((errors+1))
                continue
            fi

            command -v $AIGSIM
            if (($? != 0)) ; then
                echo "Skipping counter-example validation because aigsim was not found"
                continue
            fi

            $AIGSIM -c $aig_file $logfile > /dev/null 2>&1
            if (( $? != 0 )) ; then
                echo "Counter-example was faulty: see $logfile"
                errors=$((errors+1))
                continue
            fi
        fi
    done

    if ((errors > 0)) ; then
        return 1
    else
        return 0
    fi
}

function run_test() {
    name=$1 ; shift
    args=$@
    echo -n "Running test $name: "
    minimize_integration $name $args > $tmpdir/$name.log

    if [ $? -eq 0 ] ; then
        echo passed
        tests_passed=$((tests_passed+1))
    else
        echo failed
        tests_failed=$((tests_failed+1))
    fi
}

function run_msis_test() {
    run_test $@
}

function run_shrink_proof_test() {
    name=$1 ; shift
    run_test $name --non-minimal $@
}

function run_all_msis_test() {
    name=$1 ; shift
    run_test $name --all $@
}

function run_ic3_test() {
    name=$1 ; shift
    args=$@

    echo -n "Running test $name: "
    ic3_integration $name $args > $tmpdir/$name.log

    if [ $? -eq 0 ] ; then
        echo passed
        tests_passed=$((tests_passed+1))
    else
        echo failed
        tests_failed=$((tests_failed+1))
    fi
}

function run_bmc_test() {
    name=$1 ; shift
    args=$@

    echo -n "Running test $name: "
    bmc_integration $name $args > $tmpdir/$name.log

    if [ $? -eq 0 ] ; then
        echo passed
        tests_passed=$((tests_passed+1))
    else
        echo failed
        tests_failed=$((tests_failed+1))
    fi
}

function run_ivc_test() {
    name=$1 ; shift
    args=$@

    echo -n "Running test $name: "
    ivc_integration $name $args > $tmpdir/$name.log

    if [ $? -eq 0 ] ; then
        echo passed
        tests_passed=$((tests_passed+1))
    else
        echo failed
        tests_failed=$((tests_failed+1))
    fi
}

if ((limited_run == 0 || run_min == 1)) ; then
    run_msis_test BRUTEFORCE --bfmin
    run_msis_test SISI --sisi
    run_all_msis_test MARCO --marco
    run_all_msis_test CAMSIS --camsis
    run_shrink_proof_test SIMPLEMIN --simplemin
fi

if ((limited_run == 0 || run_bmc == 1)) ; then
    run_bmc_test BMC --bmc 4
fi

if ((limited_run == 0 || run_ic3 == 1)) ; then
    run_ic3_test IC3 --ic3
fi

if ((limited_run == 0 || run_ivc == 1)) ;  then
    run_ivc_test CAIVC --caivc
    run_ivc_test MARCOIVC --marco-ivc
    # No golden IVCs, so we don't need to do anything different for
    # non-all IVC tests (the test just checks they are safe and minimal)
    run_ivc_test IVCBF --ivcbf
    run_ivc_test IVCUCBF --ivcucbf
fi

echo PASS: $tests_passed
echo FAIL: $tests_failed

if (($tests_failed > 0)) ; then
    echo "Results are available in $tmpdir"
    exit 1
else
    rm -r $tmpdir
fi
exit 0

