#!/bin/bash


PME=./pme
CANONICALIZE=scripts/pme-canonicalize
tmpdir=$(mktemp -d)

VALGRIND=
VALGRIND_COMMAND="valgrind --tool=memcheck --leak-check=full --error-exitcode=1 --suppressions=glucose.supp"
tests_passed=0
tests_failed=0

POSITIONAL=()
while [[ $# -gt 0 ]] ; do
    key="$1"

    case $key in
        --valgrind)
        VALGRIND=$VALGRIND_COMMAND
        shift
        ;;
        *)    # unknown option
        POSITIONAL+=("$1")
        shift
        ;;
    esac
done
set -- "${POSITIONAL[@]}" #

function integration() {
    name=$1 ; shift
    all_msis_arg=$1
    all_msis=0
    if [ "$all_msis_arg" == "--all" ] ; then
        all_msis=1
        shift
    fi
    errors=0
    for aig_file in examples/*.aig; do
        prefix=${aig_file%.*}
        aig_name=${prefix##*/}
        aig_tmpdir=$tmpdir/$name/$aig_name

        mkdir -p $aig_tmpdir

        for pme_file in $prefix.*.pme ; do
            # Skip AIGs for which we don't have any proofs
            [ -f "$pme_file" ] || break
            pme_name=${pme_file%.*}
            pme_name=${pme_name##*/}
            pme_tmpdir=$tmpdir/$name/$aig_name/$pme_name

            mkdir -p $pme_tmpdir

            logfile=$pme_tmpdir/pme.log

            $VALGRIND \
            $PME $@ \
            --save-proofs $pme_tmpdir/integration $aig_file $pme_file \
            > $logfile 2>&1

            if (($? != 0)) ; then
                echo "Error running PME for $pme_file: see $logfile for details"
                errors=$((errors+1))
            fi

            minimized_dir=$pme_file.minimized
            golden_missing=0
            integration_missing=0
            if [ -d $minimized_dir ] ; then
                echo Checking golden result for $pme_file versus $minimized_dir

                # Always check that the proof we found is in the golden result
                for integration_file in $pme_tmpdir/*.pme ; do
                    $CANONICALIZE $integration_file
                    integration_sha=$(sha1sum $integration_file | cut -f1 -d' ')
                    find $minimized_dir -type f -name "*.pme" \
                        -exec sha1sum {} + \
                        | grep "^$integration_sha" > /dev/null
                    if [ $? -ne 0 ] ; then
                        echo $integration_file is not in the golden result
                        errors=$((errors+1))
                        integration_missing=$((integration_missing+1))
                    fi
                done

                # For all-msis algorithms, check that each golden proof was
                # found
                if (($all_msis != 0)) ; then
                    for golden_file in $minimized_dir/*.pme ; do
                        golden_sha=$(sha1sum $golden_file | cut -f1 -d' ')
                        find $pme_tmpdir -type f -name "*.pme" \
                            -exec sha1sum {} + \
                            | grep "^$golden_sha" > /dev/null
                        if [ $? -ne 0 ] ; then
                            echo $golden_file is not in the integration test result
                            errors=$((errors+1))
                            golden_missing=$((golden_missing+1))
                        fi
                    done
                fi

                if ((golden_missing > 0)) || ((integration_missing > 0)) ; then
                    echo "Golden result is missing $integration_missing proofs"
                    echo "Test result is missing $golden_missing proofs"
                else
                    echo "Golden result matches"
                fi
            else
                echo No golden result for $pme_file
            fi
        done

        non_proof=0
        non_minimal=0
        good_proof=0

        for proof_file in $aig_tmpdir/**/*.pme ; do
            # Skip if the pattern only matches literally *.pme, which means
            # no proofs were generated.
            [ -f "$proof_file" ] || break
            $PME --check $aig_file $proof_file > /dev/null 2>&1
            if (($? != 0)) ; then
                non_proof=$((non_proof+1))
                echo $proof_file is not a proof
                continue
            fi

            $PME --check-minimal $aig_file $proof_file > /dev/null 2>&1
            if (($? != 0)) ; then
                non_minimal=$((non_minimal+1))
                echo $proof_file is non-minimal
                continue
            fi

            good_proof=$((good_proof+1))
        done

        if ((non_proof > 0)) || ((non_minimal > 0)) ; then
            echo -n "Found $non_proof non-proofs and "
            echo    "$non_minimal non-minimal proofs for $aig_file"
            errors=$(($errors+1))
            continue
        elif ((good_proof == 0)) ; then
            echo No proofs were generated for $aig_file
            errors=$(($errors+1))
            continue
        else
            echo All $good_proof proofs validated for $aig_file
        fi

    done

    if ((errors > 0)) ; then
        return 1
    else
        return 0
    fi
}

function run_test() {
    name=$1 ; shift
    args=$@
    echo -n "Running test $name: "
    integration $name $args > $tmpdir/$name.log

    if [ $? -eq 0 ] ; then
        echo passed
        tests_passed=$((tests_passed+1))
    else
        echo failed
        tests_failed=$((tests_failed+1))
    fi
}

function run_msis_test() {
    run_test $@
}

function run_all_msis_test() {
    name=$1 ; shift
    args=$@
    run_test $name --all $@
}

run_msis_test BRUTEFORCE --bfmin
run_msis_test SISI --sisi
run_all_msis_test MARCO --marco

echo PASS: $tests_passed
echo FAIL: $tests_failed

if (($tests_failed > 0)) ; then
    echo "Results are available in $tmpdir"
    exit 1
else
    rm -r $tmpdir
fi
exit 0

